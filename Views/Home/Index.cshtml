@{
    ViewData["Title"] = "Rock Paper Scissors Lizard Spock";
}

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/css/styles.css" />
</head>
  <body>
    <div id="slideshow">
      <div class="slide-wrapper">
        <div class="slide">
          <h1 class="slide-number">Rock</h1>
          <img src="~/css/Assets/rock.png" alt="Rock" />
        </div>
        <div class="slide">
          <h1 class="slide-number">Paper</h1>
          <img src="~/css/Assets/paper.png" alt="Paper" />
        </div>
        <div class="slide">
          <h1 class="slide-number">Scissors</h1>
          <img src="~/css/Assets/scissors.png" alt="Scissors" />
        </div>
        <div class="slide">
          <h1 class="slide-number">Lizard</h1>
          <img src="~/css/Assets/lizard.png" alt="Lizard" />
        </div>
        <div class="slide">
          <h1 class="slide-number">Spock</h1>
          <img src="~/css/Assets/spock.png" alt="Spock" />
        </div>
      </div>
    </div>
    <div id="round-declaration">
        <div id="result">
            <p>Your Shape: </p>
            <p>Computer Shape: </p>
            <p id="result-outcome">Result: </p>
        </div>

    </div>
    <div id="play-again">PLAY AGAIN?</div>

    <div id="choices-wrapper">
        <div id="choices-container">
            <label id="choices-label" for="choices">Choose a shape:</label>
            <select name="choices" id="choices">
                <option value="">-</option>
            </select>
        </div>
        <button id="playButton">Play</button>
    </div>
    <script>
        // ShapesDictionary used to populate results window
        const shapesDict = {
            0: "Rock",
            1: "Paper",
            2: "Scissors",
            3: "Lizard",
            4: "Spock"
        };


        // PopulateChoices is used to upload all shapes from Choices endpoint and present them to the user
        function populateChoices() {
            fetch('Choices')
                .then(response => response.json())
                .then(data => {
                    var dropdown = document.getElementById("choices");
                    dropdown.innerHTML = '';

                    var defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.text = "-";
                    dropdown.appendChild(defaultOption);

                    data.forEach(choice => {
                        var option = document.createElement("option");
                        option.value = choice.id;
                        option.text = choice.name;
                        dropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching choices:', error);
                });
        }
        window.onload = populateChoices;


        // Variables used in the logic declared here so they dont have to be declared multiple times
        const playButton = document.getElementById("playButton");
        let gamePlayed = false;

        var slideshow = document.getElementById("slideshow");
        var roundDeclaration = document.getElementById("round-declaration");
        var playAgainPrompt = document.getElementById("play-again");
        var choices = document.getElementById("choices");
        var choicesLabel = document.getElementById("choices-label");


        // Play button listener checks for game state based on the button text and hides/shows elements based on that
        playButton.addEventListener("click", function () {
            if (!gamePlayed) {
                slideshow.style.display = "none";
                roundDeclaration.style.display = "block";
                playAgainPrompt.style.display = "block";
                choices.style.display = "none";
                choicesLabel.style.display = "none";

                playButton.innerHTML = "Play again";
                gamePlayed = true;
                play();
                populateChoices();

            } else {
                slideshow.style.display = "block";
                roundDeclaration.style.display = "none";
                playAgainPrompt.style.display = "none";
                choices.style.display = "block";
                choicesLabel.style.display = "block";
                playButton.innerHTML = "Play";
                populateChoices();
                gamePlayed = false;
            }
        });


        // Play function being called by pressing Play button returning a JSON response with results
        // and populating the HTML elements
        function play() {
            var selectedChoice = document.getElementById("choices").value;
            console.log(selectedChoice);
            if (selectedChoice === "-") {
                alert("Please select a valid shape.");
                return;
            }
            fetch('/play', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    player: parseInt(selectedChoice)
                })
            })
                .then(response => {
                    if (!response.ok) {
                        document.getElementById("result").innerHTML = "Please choose a shape";
                    }

                    return response.json();
                })
                .then(data => {
                    const player = shapesDict[data.player];
                    const computer = shapesDict[data.computer];
                    const results = {
                        "PlayerWins": "Player Wins!",
                        "ComputerWins": "Computer Wins!",
                        "Draw": "It's a Draw!"
                    };

                    document.getElementById("result").innerHTML = `
                                                <p>Your Shape: ${player}</p>
                                                <p>Computer Shape: ${computer}</p>
                                                <p style="font-weight:bold;">Result: ${results[data.results] || data.results}</p>
                                            `;

                })
                .catch(error => console.error('Error:', error));
        }
    </script>
  </body>
</html>
<style>
    #round-declaration {
        margin: 0 auto;
    }

    #play-again {
        margin: 0 auto;
    }

    #slideshow {
        text-align: center;
    }

    #choices-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
    }

    #choices-container {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 12px;
    }

    #playButton {
        display: block;
    }

</style>